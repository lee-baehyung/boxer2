# 제품코드
def add(a: int, b: int) -> int:
    return a + b

#테스트 코드
def test_add() -> None:
    # Given: 무엇인가 주어졌을때
    # 버그는 "경계"를 좋아합니다.
    # int의 경우에는 -1, 0, 1
    a, b= 1, 1

    # When : 테스트 대상이 되는 함수를 호출 합니다.
    result = add(a, b) # result의 타입은 int

    # Then:
    assert result == 2
    if not result == 2: raise AssertionError

///

from datetime import datetime, timedelta

# literal 을 쓰지 않고 상수를 쓰는 이유
# 2라는 숫자에 "배송일이야"라고 배경을 모르는 사람들
# (미래의 동료, 미래에 이 사실을 까먹은 나 자신)에게 알려주는 역할
# magic number를 쓰지 말자:
DELIVERY_DAYS = 2

def _is_holiday(day: datetime) -> bool:
    return day.weekday() > 5

def get_eta(purchase_date: datetime) -> datetime:
    current_date = purchase_date
    remaining_days = DELIVERY_DAYS

    while remaining_days > 0:
        current_date += timedelta(days=1)
        if not _is_holiday(current_date):
            remaining_days -= 1

    return current_date

def test_get_eta_2023_12_01() -> None:
    result = get_eta(datetime(2023, 12, 1))
    assert result == datetime(2023, 12, 4)

def test_get_eta_2024_12_31() -> None:
    """
    공휴일 정보가 없어서 1월 1일도 평일로 취급됩니다.
    """
    result = get_eta(datetime(2024, 12, 31))
    assert result == datetime(2025, 1, 2)

def test_get_eta_2024_02_28() -> None:
    result = get_eta(datetime(2024, 2, 28))
    assert result == datetime(2024, 3, 1)

def test_get_eta_2023_02_28() -> None:
    result = get_eta(datetime(2023, 2, 28))
    assert result == datetime(2023, 3, 2)


////
temp.py

def add(a: int, b: int) -> int:
    return a + b

def mul(a: int, b: int) -> int:
    return a * b



test_temp.py

from temp import add


def test_add() -> None:
    # Given
    a, b = 1, 1

    # When
    result = add(a, b)

    # Then
    assert result == 2
